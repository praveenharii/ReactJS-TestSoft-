{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboard = keyboard;\nexports.keyboardImplementationWrapper = keyboardImplementationWrapper;\nObject.defineProperty(exports, \"specialCharMap\", {\n  enumerable: true,\n  get: function get() {\n    return _specialCharMap.specialCharMap;\n  }\n});\nvar _dom = require(\"@testing-library/dom\");\nvar _keyboardImplementation = require(\"./keyboardImplementation\");\nvar _keyMap = require(\"./keyMap\");\nvar _specialCharMap = require(\"./specialCharMap\");\nfunction keyboard(text, options) {\n  var _options$delay;\n  var _keyboardImplementati = keyboardImplementationWrapper(text, options),\n    promise = _keyboardImplementati.promise,\n    state = _keyboardImplementati.state;\n  if (((_options$delay = options == null ? void 0 : options.delay) != null ? _options$delay : 0) > 0) {\n    return (0, _dom.getConfig)().asyncWrapper(function () {\n      return promise.then(function () {\n        return state;\n      });\n    });\n  } else {\n    // prevent users from dealing with UnhandledPromiseRejectionWarning in sync call\n    promise.catch(console.error);\n    return state;\n  }\n}\nfunction keyboardImplementationWrapper(text) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _config$keyboardState = config.keyboardState,\n    state = _config$keyboardState === void 0 ? createKeyboardState() : _config$keyboardState,\n    _config$delay = config.delay,\n    delay = _config$delay === void 0 ? 0 : _config$delay,\n    _config$document = config.document,\n    doc = _config$document === void 0 ? document : _config$document,\n    _config$autoModify = config.autoModify,\n    autoModify = _config$autoModify === void 0 ? false : _config$autoModify,\n    _config$keyboardMap = config.keyboardMap,\n    keyboardMap = _config$keyboardMap === void 0 ? _keyMap.defaultKeyMap : _config$keyboardMap;\n  var options = {\n    delay: delay,\n    document: doc,\n    autoModify: autoModify,\n    keyboardMap: keyboardMap\n  };\n  return {\n    promise: (0, _keyboardImplementation.keyboardImplementation)(text, options, state),\n    state: state,\n    releaseAllKeys: function releaseAllKeys() {\n      return (0, _keyboardImplementation.releaseAllKeys)(options, state);\n    }\n  };\n}\nfunction createKeyboardState() {\n  return {\n    activeElement: null,\n    pressed: [],\n    carryChar: '',\n    modifiers: {\n      alt: false,\n      caps: false,\n      ctrl: false,\n      meta: false,\n      shift: false\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}