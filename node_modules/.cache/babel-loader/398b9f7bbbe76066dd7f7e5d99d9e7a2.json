{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"D:\\\\React\\\\testapp1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectOptions = exports.deselectOptions = void 0;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\nvar _click = require(\"./click\");\nvar _focus = require(\"./focus\");\nvar _hover = require(\"./hover\");\nfunction selectOptionsBase(newValue, select, values, init) {\n  var _ref = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},\n    _ref$skipPointerEvent = _ref.skipPointerEventsCheck,\n    skipPointerEventsCheck = _ref$skipPointerEvent === void 0 ? false : _ref$skipPointerEvent;\n  if (!newValue && !select.multiple) {\n    throw (0, _dom.getConfig)().getElementError(\"Unable to deselect an option in a non-multiple select. Use selectOptions to change the selection instead.\", select);\n  }\n  var valArray = Array.isArray(values) ? values : [values];\n  var allOptions = Array.from(select.querySelectorAll('option, [role=\"option\"]'));\n  var selectedOptions = valArray.map(function (val) {\n    if (typeof val !== 'string' && allOptions.includes(val)) {\n      return val;\n    } else {\n      var matchingOption = allOptions.find(function (o) {\n        return o.value === val || o.innerHTML === val;\n      });\n      if (matchingOption) {\n        return matchingOption;\n      } else {\n        throw (0, _dom.getConfig)().getElementError(\"Value \\\"\".concat(String(val), \"\\\" not found in options\"), select);\n      }\n    }\n  }).filter(function (option) {\n    return !(0, _utils.isDisabled)(option);\n  });\n  if ((0, _utils.isDisabled)(select) || !selectedOptions.length) return;\n  if ((0, _utils.isElementType)(select, 'select')) {\n    if (select.multiple) {\n      var _iterator = _createForOfIteratorHelper(selectedOptions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var option = _step.value;\n          var withPointerEvents = skipPointerEventsCheck ? true : (0, _utils.hasPointerEvents)(option); // events fired for multiple select are weird. Can't use hover...\n\n          if (withPointerEvents) {\n            _dom.fireEvent.pointerOver(option, init);\n            _dom.fireEvent.pointerEnter(select, init);\n            _dom.fireEvent.mouseOver(option);\n            _dom.fireEvent.mouseEnter(select);\n            _dom.fireEvent.pointerMove(option, init);\n            _dom.fireEvent.mouseMove(option, init);\n            _dom.fireEvent.pointerDown(option, init);\n            _dom.fireEvent.mouseDown(option, init);\n          }\n          (0, _focus.focus)(select);\n          if (withPointerEvents) {\n            _dom.fireEvent.pointerUp(option, init);\n            _dom.fireEvent.mouseUp(option, init);\n          }\n          selectOption(option);\n          if (withPointerEvents) {\n            _dom.fireEvent.click(option, init);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else if (selectedOptions.length === 1) {\n      var _withPointerEvents = skipPointerEventsCheck ? true : (0, _utils.hasPointerEvents)(select); // the click to open the select options\n\n      if (_withPointerEvents) {\n        (0, _click.click)(select, init, {\n          skipPointerEventsCheck: skipPointerEventsCheck\n        });\n      } else {\n        (0, _focus.focus)(select);\n      }\n      selectOption(selectedOptions[0]);\n      if (_withPointerEvents) {\n        // the browser triggers another click event on the select for the click on the option\n        // this second click has no 'down' phase\n        _dom.fireEvent.pointerOver(select, init);\n        _dom.fireEvent.pointerEnter(select, init);\n        _dom.fireEvent.mouseOver(select);\n        _dom.fireEvent.mouseEnter(select);\n        _dom.fireEvent.pointerUp(select, init);\n        _dom.fireEvent.mouseUp(select, init);\n        _dom.fireEvent.click(select, init);\n      }\n    } else {\n      throw (0, _dom.getConfig)().getElementError(\"Cannot select multiple options on a non-multiple select\", select);\n    }\n  } else if (select.getAttribute('role') === 'listbox') {\n    selectedOptions.forEach(function (option) {\n      (0, _hover.hover)(option, init, {\n        skipPointerEventsCheck: skipPointerEventsCheck\n      });\n      (0, _click.click)(option, init, {\n        skipPointerEventsCheck: skipPointerEventsCheck\n      });\n      (0, _hover.unhover)(option, init, {\n        skipPointerEventsCheck: skipPointerEventsCheck\n      });\n    });\n  } else {\n    throw (0, _dom.getConfig)().getElementError(\"Cannot select options on elements that are neither select nor listbox elements\", select);\n  }\n  function selectOption(option) {\n    option.selected = newValue;\n    (0, _dom.fireEvent)(select, (0, _dom.createEvent)('input', select, _objectSpread({\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }, init)));\n    _dom.fireEvent.change(select, init);\n  }\n}\nvar selectOptions = selectOptionsBase.bind(null, true);\nexports.selectOptions = selectOptions;\nvar deselectOptions = selectOptionsBase.bind(null, false);\nexports.deselectOptions = deselectOptions;","map":null,"metadata":{},"sourceType":"script"}