{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"D:\\\\React\\\\testapp1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tab = tab;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\nvar _focus = require(\"./focus\");\nvar _blur = require(\"./blur\");\nfunction getNextElement(currentIndex, shift, elements, focusTrap) {\n  if ((0, _utils.isDocument)(focusTrap) && (currentIndex === 0 && shift || currentIndex === elements.length - 1 && !shift)) {\n    return focusTrap.body;\n  }\n  var nextIndex = shift ? currentIndex - 1 : currentIndex + 1;\n  var defaultIndex = shift ? elements.length - 1 : 0;\n  return elements[nextIndex] || elements[defaultIndex];\n}\nfunction tab() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$shift = _ref.shift,\n    shift = _ref$shift === void 0 ? false : _ref$shift,\n    focusTrap = _ref.focusTrap;\n  var _focusTrap$ownerDocum, _focusTrap;\n  var doc = (_focusTrap$ownerDocum = (_focusTrap = focusTrap) == null ? void 0 : _focusTrap.ownerDocument) != null ? _focusTrap$ownerDocum : document;\n  var previousElement = (0, _utils.getActiveElement)(doc);\n  if (!focusTrap) {\n    focusTrap = doc;\n  }\n  var focusableElements = focusTrap.querySelectorAll(_utils.FOCUSABLE_SELECTOR);\n  var enabledElements = Array.from(focusableElements).filter(function (el) {\n    return el === previousElement || el.getAttribute('tabindex') !== '-1' && !(0, _utils.isDisabled)(el) &&\n    // Hidden elements are not tabable\n    (0, _utils.isVisible)(el);\n  });\n  if (enabledElements.length === 0) return;\n  var orderedElements = enabledElements.map(function (el, idx) {\n    return {\n      el: el,\n      idx: idx\n    };\n  }).sort(function (a, b) {\n    // tabindex has no effect if the active element has tabindex=\"-1\"\n    if (previousElement && previousElement.getAttribute('tabindex') === '-1') {\n      return a.idx - b.idx;\n    }\n    var tabIndexA = Number(a.el.getAttribute('tabindex'));\n    var tabIndexB = Number(b.el.getAttribute('tabindex'));\n    var diff = tabIndexA - tabIndexB;\n    return diff === 0 ? a.idx - b.idx : diff;\n  }).map(function (_ref2) {\n    var el = _ref2.el;\n    return el;\n  }); // TODO: verify/remove type casts\n\n  var checkedRadio = {};\n  var prunedElements = [];\n  orderedElements.forEach(function (currentElement) {\n    // For radio groups keep only the active radio\n    // If there is no active radio, keep only the checked radio\n    // If there is no checked radio, treat like everything else\n    var el = currentElement;\n    if (el.type === 'radio' && el.name) {\n      // If the active element is part of the group, add only that\n      var prev = previousElement;\n      if (prev && prev.type === el.type && prev.name === el.name) {\n        if (el === prev) {\n          prunedElements.push(el);\n        }\n        return;\n      } // If we stumble upon a checked radio, remove the others\n\n      if (el.checked) {\n        prunedElements = prunedElements.filter(function (e) {\n          return e.type !== el.type || e.name !== el.name;\n        });\n        prunedElements.push(el);\n        checkedRadio[el.name] = el;\n        return;\n      } // If we already found the checked one, skip\n\n      if (typeof checkedRadio[el.name] !== 'undefined') {\n        return;\n      }\n    }\n    prunedElements.push(el);\n  });\n  var index = prunedElements.findIndex(function (el) {\n    return el === previousElement;\n  });\n  var nextElement = getNextElement(index, shift, prunedElements, focusTrap);\n  var shiftKeyInit = {\n    key: 'Shift',\n    keyCode: 16,\n    shiftKey: true\n  };\n  var tabKeyInit = {\n    key: 'Tab',\n    keyCode: 9,\n    shiftKey: shift\n  };\n  var continueToTab = true; // not sure how to make it so there's no previous element...\n  // istanbul ignore else\n\n  if (previousElement) {\n    // preventDefault on the shift key makes no difference\n    if (shift) _dom.fireEvent.keyDown(previousElement, _objectSpread({}, shiftKeyInit));\n    continueToTab = _dom.fireEvent.keyDown(previousElement, _objectSpread({}, tabKeyInit));\n  }\n  var keyUpTarget = !continueToTab && previousElement ? previousElement : nextElement;\n  if (continueToTab) {\n    if (nextElement === doc.body) {\n      /* istanbul ignore else */\n      if (previousElement) {\n        (0, _blur.blur)(previousElement);\n      }\n    } else {\n      (0, _focus.focus)(nextElement);\n    }\n  }\n  _dom.fireEvent.keyUp(keyUpTarget, _objectSpread({}, tabKeyInit));\n  if (shift) {\n    _dom.fireEvent.keyUp(keyUpTarget, _objectSpread({}, shiftKeyInit, {\n      shiftKey: false\n    }));\n  }\n}\n/*\neslint\n  complexity: \"off\",\n  max-statements: \"off\",\n*/","map":null,"metadata":{},"sourceType":"script"}