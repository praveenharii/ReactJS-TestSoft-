{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"D:\\\\React\\\\testapp1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireInputEvent = fireInputEvent;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"../../utils\");\nfunction fireInputEvent(element, _ref) {\n  var newValue = _ref.newValue,\n    newSelectionStart = _ref.newSelectionStart,\n    eventOverrides = _ref.eventOverrides;\n  // apply the changes before firing the input event, so that input handlers can access the altered dom and selection\n  if ((0, _utils.isContentEditable)(element)) {\n    applyNative(element, 'textContent', newValue);\n  } else /* istanbul ignore else */\n    if ((0, _utils.isElementType)(element, ['input', 'textarea'])) {\n      applyNative(element, 'value', newValue);\n    } else {\n      // TODO: properly type guard\n      throw new Error('Invalid Element');\n    }\n  setSelectionRangeAfterInput(element, newSelectionStart);\n  _dom.fireEvent.input(element, _objectSpread({}, eventOverrides));\n  setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart);\n}\nfunction setSelectionRangeAfterInput(element, newSelectionStart) {\n  (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n}\nfunction setSelectionRangeAfterInputHandler(element, newValue, newSelectionStart) {\n  var value = (0, _utils.getValue)(element); // don't apply this workaround on elements that don't necessarily report the visible value - e.g. number\n  // TODO: this could probably be only applied when there is keyboardState.carryValue\n\n  var isUnreliableValue = value === '' && (0, _utils.hasUnreliableEmptyValue)(element);\n  if (!isUnreliableValue && value === newValue) {\n    var _ref2 = (0, _utils.getSelectionRange)(element),\n      selectionStart = _ref2.selectionStart;\n    if (selectionStart === value.length) {\n      // The value was changed as expected, but the cursor was moved to the end\n      // TODO: this could probably be only applied when we work around a framework setter on the element in applyNative\n      (0, _utils.setSelectionRange)(element, newSelectionStart, newSelectionStart);\n    }\n  }\n}\nvar initial = Symbol('initial input value/textContent');\nvar onBlur = Symbol('onBlur');\n\n/**\n * React tracks the changes on element properties.\n * This workaround tries to alter the DOM element without React noticing,\n * so that it later picks up the change.\n *\n * @see https://github.com/facebook/react/blob/148f8e497c7d37a3c7ab99f01dec2692427272b1/packages/react-dom/src/client/inputValueTracking.js#L51-L104\n */\nfunction applyNative(element, propName, propValue) {\n  var descriptor = Object.getOwnPropertyDescriptor(element, propName);\n  var nativeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName);\n  if (descriptor && nativeDescriptor) {\n    Object.defineProperty(element, propName, nativeDescriptor);\n  } // Keep track of the initial value to determine if a change event should be dispatched.\n  // CONSTRAINT: We can not determine what happened between focus event and our first API call.\n\n  if (element[initial] === undefined) {\n    element[initial] = String(element[propName]);\n  }\n  element[propName] = propValue; // Add an event listener for the blur event to the capture phase on the window.\n  // CONSTRAINT: Currently there is no cross-platform solution to unshift the event handler stack.\n  // Our change event might occur after other event handlers on the blur event have been processed.\n\n  if (!element[onBlur]) {\n    var _element$ownerDocumen;\n    (_element$ownerDocumen = element.ownerDocument.defaultView) == null ? void 0 : _element$ownerDocumen.addEventListener('blur', element[onBlur] = function () {\n      var initV = element[initial]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[onBlur]; // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete element[initial];\n      if (String(element[propName]) !== initV) {\n        _dom.fireEvent.change(element);\n      }\n    }, {\n      capture: true,\n      once: true\n    });\n  }\n  if (descriptor) {\n    Object.defineProperty(element, propName, descriptor);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}