{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\testapp1\\\\src\\\\Exam\\\\studentTakeTest.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport moment from \"moment\";\nexport default function StudentTakeTest() {\n  // const location = useLocation();\n  // const id = location.state.id;\n  // const [test, setTest] = useState(null);\n  // const [userAnswers, setUserAnswers] = useState({});\n  // const [timeRemaining, setTimeRemaining] = useState(0);\n  var _useParams = useParams(),\n    subject = _useParams.subject,\n    testid = _useParams.testid;\n  console.log(subject, testid);\n  useEffect(function () {\n    console.log(\"Fetching test data...\");\n    fetch(\"http://localhost:5000/studentViewTest/\".concat(testid), {\n      method: \"GET\"\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      //setTest(data.data);\n      //setTimeRemaining(moment(data.data.date).diff(moment(), \"seconds\"));\n      console.log(data);\n    }).catch(function (error) {\n      console.error(error);\n    });\n    console.log(\"Finished fetching test data...\");\n  }, [testid]);\n\n  //  useEffect(() => {\n  //    const timer = setInterval(() => {\n  //      setTimeRemaining((prevTime) => prevTime - 1);\n  //    }, 1000);\n  //    return () => clearInterval(timer);\n  //  }, []);\n\n  //  const handleAnswerSelect = (questionIndex, optionIndex) => {\n  //    setUserAnswers((prevAnswers) => ({\n  //      ...prevAnswers,\n  //      [questionIndex]: optionIndex,\n  //    }));\n  //  };\n\n  //  const handleSubmitTest = async () => {\n  //    try {\n  //      const response = await fetch(\n  //        `/subjects/${id}/${subject}/tests/${testid}/submit`,\n  //        {\n  //          method: \"POST\",\n  //          headers: {\n  //            \"Content-Type\": \"application/json\",\n  //          },\n  //          body: JSON.stringify({\n  //            answers: userAnswers,\n  //          }),\n  //        }\n  //      );\n  //      const data = await response.json();\n  //      console.log(data);\n  //    } catch (error) {\n  //      console.error(error);\n  //    }\n  //  };\n\n  //  if (!test) {\n  //    return <div>Loading...</div>;\n  //  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, \"hi\")\n  // <div className=\"container\">\n  //   <h1>{test.name}</h1>\n  //   <h5>\n  //     Time Remaining:{\" \"}\n  //     {moment\n  //       .duration(timeRemaining, \"seconds\")\n  //       .format(\"hh:mm:ss\", { trim: false })}\n  //   </h5>\n  //   <Table bordered hover>\n  //     <thead>\n  //       <tr>\n  //         <th>#</th>\n  //         <th>Question</th>\n  //         <th>Options</th>\n  //       </tr>\n  //     </thead>\n  //     <tbody>\n  //       {test.questions.map((question, index) => (\n  //         <tr key={index}>\n  //           <td>{index + 1}</td>\n  //           <td>{question.question}</td>\n  //           <td>\n  //             {question.options.map((option, optionIndex) => (\n  //               <div key={optionIndex}>\n  //                 <Button\n  //                   variant={\n  //                     userAnswers[index] === optionIndex\n  //                       ? \"primary\"\n  //                       : \"outline-secondary\"\n  //                   }\n  //                   onClick={() => handleAnswerSelect(index, optionIndex)}\n  //                 >\n  //                   {option}\n  //                 </Button>\n  //               </div>\n  //             ))}\n  //           </td>\n  //         </tr>\n  //       ))}\n  //     </tbody>\n  //   </Table>\n  //   <Button variant=\"success\" onClick={handleSubmitTest}>\n  //     Submit Test\n  //   </Button>\n  // </div>\n  ;\n}","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","useLocation","Table","Button","FontAwesomeIcon","faCheckCircle","faTimesCircle","moment","StudentTakeTest","_useParams","subject","testid","console","log","fetch","concat","method","then","res","json","data","catch","error","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/React/testapp1/src/Exam/studentTakeTest.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams , useLocation } from \"react-router-dom\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCheckCircle,\r\n  faTimesCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport moment from \"moment\";\r\n\r\n\r\nexport default function StudentTakeTest() {\r\n    // const location = useLocation();\r\n    // const id = location.state.id;\r\n    // const [test, setTest] = useState(null);\r\n    // const [userAnswers, setUserAnswers] = useState({});\r\n    // const [timeRemaining, setTimeRemaining] = useState(0);\r\n    const { subject, testid } = useParams();\r\n    console.log(subject, testid);\r\n    \r\n\r\n  useEffect(() => {\r\n    \r\n     console.log(\"Fetching test data...\");\r\n    fetch(`http://localhost:5000/studentViewTest/${testid}`, {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        //setTest(data.data);\r\n        //setTimeRemaining(moment(data.data.date).diff(moment(), \"seconds\"));\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n      console.log(\"Finished fetching test data...\");\r\n  }, [testid]);\r\n  \r\n\r\n  //  useEffect(() => {\r\n  //    const timer = setInterval(() => {\r\n  //      setTimeRemaining((prevTime) => prevTime - 1);\r\n  //    }, 1000);\r\n  //    return () => clearInterval(timer);\r\n  //  }, []);\r\n\r\n  //  const handleAnswerSelect = (questionIndex, optionIndex) => {\r\n  //    setUserAnswers((prevAnswers) => ({\r\n  //      ...prevAnswers,\r\n  //      [questionIndex]: optionIndex,\r\n  //    }));\r\n  //  };\r\n\r\n  //  const handleSubmitTest = async () => {\r\n  //    try {\r\n  //      const response = await fetch(\r\n  //        `/subjects/${id}/${subject}/tests/${testid}/submit`,\r\n  //        {\r\n  //          method: \"POST\",\r\n  //          headers: {\r\n  //            \"Content-Type\": \"application/json\",\r\n  //          },\r\n  //          body: JSON.stringify({\r\n  //            answers: userAnswers,\r\n  //          }),\r\n  //        }\r\n  //      );\r\n  //      const data = await response.json();\r\n  //      console.log(data);\r\n  //    } catch (error) {\r\n  //      console.error(error);\r\n  //    }\r\n  //  };\r\n\r\n  //  if (!test) {\r\n  //    return <div>Loading...</div>;\r\n  //  }\r\n\r\n  return (\r\n    <div>hi</div>\r\n    // <div className=\"container\">\r\n    //   <h1>{test.name}</h1>\r\n    //   <h5>\r\n    //     Time Remaining:{\" \"}\r\n    //     {moment\r\n    //       .duration(timeRemaining, \"seconds\")\r\n    //       .format(\"hh:mm:ss\", { trim: false })}\r\n    //   </h5>\r\n    //   <Table bordered hover>\r\n    //     <thead>\r\n    //       <tr>\r\n    //         <th>#</th>\r\n    //         <th>Question</th>\r\n    //         <th>Options</th>\r\n    //       </tr>\r\n    //     </thead>\r\n    //     <tbody>\r\n    //       {test.questions.map((question, index) => (\r\n    //         <tr key={index}>\r\n    //           <td>{index + 1}</td>\r\n    //           <td>{question.question}</td>\r\n    //           <td>\r\n    //             {question.options.map((option, optionIndex) => (\r\n    //               <div key={optionIndex}>\r\n    //                 <Button\r\n    //                   variant={\r\n    //                     userAnswers[index] === optionIndex\r\n    //                       ? \"primary\"\r\n    //                       : \"outline-secondary\"\r\n    //                   }\r\n    //                   onClick={() => handleAnswerSelect(index, optionIndex)}\r\n    //                 >\r\n    //                   {option}\r\n    //                 </Button>\r\n    //               </div>\r\n    //             ))}\r\n    //           </td>\r\n    //         </tr>\r\n    //       ))}\r\n    //     </tbody>\r\n    //   </Table>\r\n    //   <Button variant=\"success\" onClick={handleSubmitTest}>\r\n    //     Submit Test\r\n    //   </Button>\r\n    // </div>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,EAAGC,WAAW,QAAQ,kBAAkB;AACvE,SAASC,KAAK,EAAEC,MAAM,QAAQ,iBAAiB;AAC/C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SACEC,aAAa,EACbC,aAAa,QACR,mCAAmC;AAC1C,OAAOC,MAAM,MAAM,QAAQ;AAG3B,eAAe,SAASC,eAAeA,CAAA,EAAG;EACtC;EACA;EACA;EACA;EACA;EAAA,IAAAC,UAAA,GAC4BT,SAAS,EAAE;IAA/BU,OAAO,GAAAD,UAAA,CAAPC,OAAO;IAAEC,MAAM,GAAAF,UAAA,CAANE,MAAM;EACvBC,OAAO,CAACC,GAAG,CAACH,OAAO,EAAEC,MAAM,CAAC;EAG9Bb,SAAS,CAAC,YAAM;IAEbc,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACrCC,KAAK,0CAAAC,MAAA,CAA0CJ,MAAM,GAAI;MACvDK,MAAM,EAAE;IACV,CAAC,CAAC,CACCC,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,EAAE;IAAA,EAAC,CACzBF,IAAI,CAAC,UAACG,IAAI,EAAK;MACd;MACA;MACAR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAC,UAACC,KAAK,EAAK;MAChBV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;IACFV,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EACjD,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;;EAGZ;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACEf,KAAA,CAAA2B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,IAAE;EACP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ"},"metadata":{},"sourceType":"module"}