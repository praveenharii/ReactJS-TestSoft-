{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\nfunction isSupportedElement(element) {\n  return (0, _utils.isElementType)(element, 'input') && Boolean(_utils.editableInputTypes[element.type]) || (0, _utils.isElementType)(element, 'textarea');\n}\nfunction paste(element, text, init) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    initialSelectionStart = _ref.initialSelectionStart,\n    initialSelectionEnd = _ref.initialSelectionEnd;\n  // TODO: implement for contenteditable\n  if (!isSupportedElement(element)) {\n    throw new TypeError(\"The given \".concat(element.tagName, \" element is currently unsupported.\\n      A PR extending this implementation would be very much welcome at https://github.com/testing-library/user-event\"));\n  }\n  if ((0, _utils.isDisabled)(element)) {\n    return;\n  }\n  (0, _utils.eventWrapper)(function () {\n    return element.focus();\n  }); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRange)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n  _dom.fireEvent.paste(element, init);\n  if (element.readOnly) {\n    return;\n  }\n  text = text.substr(0, (0, _utils.getSpaceUntilMaxLength)(element));\n  var _ref2 = (0, _utils.calculateNewValue)(text, element),\n    newValue = _ref2.newValue,\n    newSelectionStart = _ref2.newSelectionStart;\n  _dom.fireEvent.input(element, {\n    inputType: 'insertFromPaste',\n    target: {\n      value: newValue\n    }\n  });\n  (0, _utils.setSelectionRange)(element,\n  // TODO: investigate why the selection caused by invalid parameters was expected\n  {\n    newSelectionStart: newSelectionStart,\n    selectionEnd: newSelectionStart\n  }, {});\n}","map":null,"metadata":{},"sourceType":"script"}