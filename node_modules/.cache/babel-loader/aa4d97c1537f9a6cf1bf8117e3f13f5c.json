{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keydownBehavior = void 0;\nvar _utils = require(\"../../utils\");\nvar _shared = require(\"../shared\");\n\n/**\n * This file should contain behavior for arrow keys as described here:\n * https://w3c.github.io/uievents-code/#key-controlpad-section\n */\nvar keydownBehavior = [{\n  matches: function matches(keyDef, element) {\n    return (keyDef.key === 'Home' || keyDef.key === 'End') && ((0, _utils.isElementType)(element, ['input', 'textarea']) || (0, _utils.isContentEditable)(element));\n  },\n  handle: function handle(keyDef, element) {\n    // This could probably been improved by collapsing a selection range\n    if (keyDef.key === 'Home') {\n      (0, _utils.setSelectionRange)(element, 0, 0);\n    } else {\n      var _getValue$length, _getValue;\n      var newPos = (_getValue$length = (_getValue = (0, _utils.getValue)(element)) == null ? void 0 : _getValue.length) != null ? _getValue$length : /* istanbul ignore next */\n      0;\n      (0, _utils.setSelectionRange)(element, newPos, newPos);\n    }\n  }\n}, {\n  matches: function matches(keyDef, element) {\n    return (keyDef.key === 'PageUp' || keyDef.key === 'PageDown') && (0, _utils.isElementType)(element, ['input']);\n  },\n  handle: function handle(keyDef, element) {\n    // This could probably been improved by collapsing a selection range\n    if (keyDef.key === 'PageUp') {\n      (0, _utils.setSelectionRange)(element, 0, 0);\n    } else {\n      var _getValue$length2, _getValue2;\n      var newPos = (_getValue$length2 = (_getValue2 = (0, _utils.getValue)(element)) == null ? void 0 : _getValue2.length) != null ? _getValue$length2 : /* istanbul ignore next */\n      0;\n      (0, _utils.setSelectionRange)(element, newPos, newPos);\n    }\n  }\n}, {\n  matches: function matches(keyDef, element) {\n    return keyDef.key === 'Delete' && (0, _utils.isEditable)(element) && !(0, _utils.isCursorAtEnd)(element);\n  },\n  handle: function handle(keDef, element, options, state) {\n    var _ref = (0, _utils.calculateNewValue)('', element, state.carryValue, undefined, 'forward'),\n      newValue = _ref.newValue,\n      newSelectionStart = _ref.newSelectionStart;\n    (0, _shared.fireInputEvent)(element, {\n      newValue: newValue,\n      newSelectionStart: newSelectionStart,\n      eventOverrides: {\n        inputType: 'deleteContentForward'\n      }\n    });\n    (0, _shared.carryValue)(element, state, newValue);\n  }\n}];\nexports.keydownBehavior = keydownBehavior;","map":null,"metadata":{},"sourceType":"script"}